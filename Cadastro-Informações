import java.util.ArrayList;
import java.util.List;      
import java.util.Scanner;
import java.util.Optional;
import java.util.Map;
import java.util.HashMap;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Sistema de Nota Fiscal - Implementação com recursos avançados
 * Este sistema permite o registro de compradores, vendedores e produtos,
 * com funcionalidades de consulta e listagem detalhada.
 * Inclui validações fiscais e cálculo de impostos.
 */
public class SistemaNotaFiscal {
    
    // Listas para armazenar os registros
    private static final List<RegistroVendedor> vendedores = new ArrayList<>();
    private static final List<RegistroComprador> compradores = new ArrayList<>();
    private static final List<RegistroProduto> produtos = new ArrayList<>();
    
    // Mapa de alíquotas de ICMS por estado para 2025
    private static final Map<String, Double> ALIQUOTAS_ICMS = new HashMap<>();
    
    // Inicialização das alíquotas de ICMS por estado
    static {
        // Região Norte
        ALIQUOTAS_ICMS.put("AC", 19.0); // Acre
        ALIQUOTAS_ICMS.put("AP", 18.0); // Amapá
        ALIQUOTAS_ICMS.put("AM", 18.0); // Amazonas
        ALIQUOTAS_ICMS.put("PA", 19.0); // Pará
        ALIQUOTAS_ICMS.put("RO", 19.5); // Rondônia
        ALIQUOTAS_ICMS.put("RR", 20.0); // Roraima
        ALIQUOTAS_ICMS.put("TO", 18.0); // Tocantins
        
        // Região Nordeste
        ALIQUOTAS_ICMS.put("AL", 18.0); // Alagoas
        ALIQUOTAS_ICMS.put("BA", 19.0); // Bahia
        ALIQUOTAS_ICMS.put("CE", 18.0); // Ceará
        ALIQUOTAS_ICMS.put("MA", 23.0); // Maranhão (atualizado para 2025)
        ALIQUOTAS_ICMS.put("PB", 18.0); // Paraíba
        ALIQUOTAS_ICMS.put("PE", 18.0); // Pernambuco
        ALIQUOTAS_ICMS.put("PI", 22.5); // Piauí (atualizado para 2025)
        ALIQUOTAS_ICMS.put("RN", 20.0); // Rio Grande do Norte (atualizado para 2025)
        ALIQUOTAS_ICMS.put("SE", 20.0); // Sergipe (atualizado para 2025)
        
        // Região Centro-Oeste
        ALIQUOTAS_ICMS.put("DF", 18.0); // Distrito Federal
        ALIQUOTAS_ICMS.put("GO", 17.0); // Goiás
        ALIQUOTAS_ICMS.put("MT", 17.0); // Mato Grosso
        ALIQUOTAS_ICMS.put("MS", 17.0); // Mato Grosso do Sul
        
        // Região Sudeste
        ALIQUOTAS_ICMS.put("ES", 17.0); // Espírito Santo
        ALIQUOTAS_ICMS.put("MG", 18.0); // Minas Gerais
        ALIQUOTAS_ICMS.put("RJ", 20.0); // Rio de Janeiro
        ALIQUOTAS_ICMS.put("SP", 18.0); // São Paulo
        
        // Região Sul
        ALIQUOTAS_ICMS.put("PR", 19.0); // Paraná
        ALIQUOTAS_ICMS.put("RS", 17.0); // Rio Grande do Sul
        ALIQUOTAS_ICMS.put("SC", 17.0); // Santa Catarina
    }
    
    // Alíquotas de impostos federais para 2025
    private static final double ALIQUOTA_IPI = 10.0;       // Varia conforme produto, usando média
    private static final double ALIQUOTA_PIS = 0.65;       // Regime cumulativo
    private static final double ALIQUOTA_COFINS = 3.0;     // Regime cumulativo
    private static final double ALIQUOTA_IRPJ = 15.0;      // Alíquota base
    private static final double ALIQUOTA_CSLL = 9.0;       // Alíquota padrão
    private static final double ALIQUOTA_IMPORTACAO = 20.0; // Varia conforme produto, usando média
    private static final double ALIQUOTA_ITBI = 3.0;       // Varia conforme município, usando média
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean executando = true;
        
        System.out.println("=== SISTEMA DE NOTA FISCAL ===");
        
        while (executando) {
            exibirMenu();
            int opcao = lerOpcao(scanner);
            
            switch (opcao) {
                case 1:
                    registrarVendedor(scanner);
                    break;
                case 2:
                    registrarComprador(scanner);
                    break;
                case 3:
                    registrarProduto(scanner);
                    break;
                case 4:
                    consultarPorNome(scanner);
                    break;
                case 5:
                    listarTodos();
                    break;
                case 6:
                    executando = false;
                    System.out.println("Sistema encerrado. Obrigado!");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }
        
        scanner.close();
    }
    
    /**
     * Exibe o menu principal do sistema
     */
    private static void exibirMenu() {
        System.out.println("\n=== MENU PRINCIPAL ===");
        System.out.println("1. Registrar Vendedor");
        System.out.println("2. Registrar Comprador");
        System.out.println("3. Registrar Produto");
        System.out.println("4. Consultar por Nome");
        System.out.println("5. Listar Todos os Registros");
        System.out.println("6. Sair");
        System.out.print("Escolha uma opção: ");
    }
    
    /**
     * Lê uma opção numérica do usuário com tratamento de exceções
     * @param scanner Scanner para leitura da entrada
     * @return Opção escolhida pelo usuário
     */
    private static int lerOpcao(Scanner scanner) {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1; // Retorna opção inválida em caso de erro
        }
    }
    
    /**
     * Registra um novo vendedor no sistema
     * @param scanner Scanner para leitura da entrada
     */
    private static void registrarVendedor(Scanner scanner) {
        System.out.println("\n=== REGISTRO DE VENDEDOR ===");
        
        System.out.print("Nome do Vendedor: ");
        String nome = scanner.nextLine().trim();
        
        // Validação do nome
        if (nome.isEmpty()) {
            System.out.println("Erro: Nome do vendedor é obrigatório!");
            return;
        }
        
        // Validação do CNPJ com formato oficial
        String cnpj = lerCNPJ(scanner);
        if (cnpj == null) {
            return;
        }
        
        RegistroVendedor vendedor = new RegistroVendedor(nome, cnpj);
        vendedores.add(vendedor);
        
        System.out.println("Vendedor registrado com sucesso!");
        System.out.println(vendedor);
    }
    
    /**
     * Lê e valida o CNPJ no formato oficial (00.066.716/0001-91)
     * @param scanner Scanner para leitura da entrada
     * @return CNPJ validado ou null em caso de erro
     */
    private static String lerCNPJ(Scanner scanner) {
        Pattern padrao = Pattern.compile("^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$");
        
        while (true) {
            System.out.print("CNPJ (formato: 00.066.716/0001-91): ");
            String cnpj = scanner.nextLine().trim();
            
            if (padrao.matcher(cnpj).matches()) {
                return cnpj;
            } else {
                System.out.println("Erro: O CNPJ deve seguir o formato XX.XXX.XXX/XXXX-XX!");
                System.out.println("Exemplo: 00.066.716/0001-91");
                System.out.println("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return null;
                }
            }
        }
    }
    
    /**
     * Registra um novo comprador no sistema
     * @param scanner Scanner para leitura da entrada
     */
    private static void registrarComprador(Scanner scanner) {
        System.out.println("\n=== REGISTRO DE COMPRADOR ===");
        
        System.out.print("Nome do Comprador: ");
        String nome = scanner.nextLine().trim();
        
        // Validação do nome
        if (nome.isEmpty()) {
            System.out.println("Erro: Nome do comprador é obrigatório!");
            return;
        }
        
        // Validação do CPF com formato oficial
        String cpf = lerCPF(scanner);
        if (cpf == null) {
            return;
        }
        
        RegistroComprador comprador = new RegistroComprador(nome, cpf);
        compradores.add(comprador);
        
        System.out.println("Comprador registrado com sucesso!");
        System.out.println(comprador);
    }
    
    /**
     * Lê e valida o CPF no formato oficial (715.665.893-84)
     * @param scanner Scanner para leitura da entrada
     * @return CPF validado ou null em caso de erro
     */
    private static String lerCPF(Scanner scanner) {
        Pattern padrao = Pattern.compile("^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$");
        
        while (true) {
            System.out.print("CPF (formato: 715.665.893-84): ");
            String cpf = scanner.nextLine().trim();
            
            if (padrao.matcher(cpf).matches()) {
                return cpf;
            } else {
                System.out.println("Erro: O CPF deve seguir o formato XXX.XXX.XXX-XX!");
                System.out.println("Exemplo: 715.665.893-84");
                System.out.println("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return null;
                }
            }
        }
    }
    
    /**
     * Registra um novo produto no sistema com informações fiscais detalhadas
     * @param scanner Scanner para leitura da entrada
     */
    private static void registrarProduto(Scanner scanner) {
        System.out.println("\n=== REGISTRO DE PRODUTO ===");
        
        // Verifica se existem vendedores cadastrados
        if (vendedores.isEmpty()) {
            System.out.println("Erro: É necessário cadastrar um vendedor antes de registrar produtos!");
            return;
        }
        
        System.out.print("Nome do Produto: ");
        String nome = scanner.nextLine().trim();
        
        // Validação básica do nome
        if (nome.isEmpty()) {
            System.out.println("Erro: Nome do produto é obrigatório!");
            return;
        }
        
        // Coleta de dados básicos com validação
        double preco = lerValorNumericoPositivo(scanner, "Preço unitário (R$): ");
        if (preco < 0) return;
        
        // Coleta de dados fiscais e detalhados
        System.out.print("Descrição completa do produto: ");
        String descricao = scanner.nextLine().trim();
        
        // Validação do NCM (formato 8542.31.00)
        String ncm = lerNCM(scanner);
        if (ncm == null) return;
        
        // Validação interativa da quantidade
        double quantidade = lerQuantidade(scanner);
        if (quantidade <= 0) return;
        
        // Validação interativa do peso
        String unidade = lerPeso(scanner);
        if (unidade == null) return;
        
        // Validação do CFOP (formato 5.405)
        String cfop = lerCFOP(scanner);
        if (cfop == null) return;
        
        // Configuração de impostos
        Map<String, Double> impostos = coletarImpostos(scanner);
        if (impostos == null) return;
        
        // Cálculo do valor total com impostos
        double valorSemImpostos = preco * quantidade;
        double valorImpostos = calcularValorImpostos(valorSemImpostos, impostos);
        double valorTotal = valorSemImpostos + valorImpostos;
        
        System.out.print("Informações complementares: ");
        String infoComplementares = scanner.nextLine().trim();
        
        // Seleção do vendedor
        System.out.println("\nVendedores disponíveis:");
        for (int i = 0; i < vendedores.size(); i++) {
            System.out.println((i + 1) + ". " + vendedores.get(i).getNomeVendedor() + " - " + vendedores.get(i).getCNPJ());
        }
        
        System.out.print("Selecione o número do vendedor: ");
        int indiceVendedor;
        try {
            indiceVendedor = Integer.parseInt(scanner.nextLine().trim()) - 1;
            if (indiceVendedor < 0 || indiceVendedor >= vendedores.size()) {
                System.out.println("Erro: Índice de vendedor inválido!");
                return;
            }
        } catch (NumberFormatException e) {
            System.out.println("Erro: Entrada inválida para índice de vendedor!");
            return;
        }
        
        RegistroVendedor vendedor = vendedores.get(indiceVendedor);
        
        // Criação do produto com todos os dados coletados
        RegistroProduto produto = new RegistroProduto(
            nome, preco, vendedor, descricao, ncm, 
            quantidade, unidade, cfop, valorSemImpostos, valorImpostos, valorTotal, 
            infoComplementares, impostos
        );
        
        produtos.add(produto);
        
        System.out.println("Produto registrado com sucesso!");
        System.out.println(produto);
    }
    
    /**
     * Lê e valida a quantidade, garantindo que seja maior que zero
     * @param scanner Scanner para leitura da entrada
     * @return Quantidade validada ou -1 em caso de erro
     */
    private static double lerQuantidade(Scanner scanner) {
        while (true) {
            System.out.print("Quantidade: ");
            try {
                double quantidade = Double.parseDouble(scanner.nextLine().trim().replace(",", "."));
                
                if (quantidade <= 0) {
                    System.out.println("Erro: A quantidade deve ser maior que zero!");
                    System.out.print("Deseja tentar novamente? (S/N): ");
                    String resposta = scanner.nextLine().trim().toUpperCase();
                    if (!resposta.equals("S")) {
                        return -1;
                    }
                } else {
                    return quantidade;
                }
            } catch (NumberFormatException e) {
                System.out.println("Erro: Valor numérico inválido!");
                System.out.print("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return -1;
                }
            }
        }
    }
    
    /**
     * Lê e valida o peso, garantindo que não seja vazio
     * @param scanner Scanner para leitura da entrada
     * @return Peso validado ou null em caso de erro
     */
    private static String lerPeso(Scanner scanner) {
        while (true) {
            System.out.print("Peso (kg, g, t, etc): ");
            String peso = scanner.nextLine().trim();
            
            if (peso.isEmpty()) {
                System.out.println("Erro: O peso é obrigatório!");
                System.out.print("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return null;
                }
            } else {
                // Verifica se o primeiro caractere é um dígito ou ponto decimal
                // para garantir que o peso começa com um valor numérico
                if (!Character.isDigit(peso.charAt(0)) && peso.charAt(0) != '.') {
                    System.out.println("Erro: O peso deve começar com um valor numérico!");
                    System.out.print("Deseja tentar novamente? (S/N): ");
                    String resposta = scanner.nextLine().trim().toUpperCase();
                    if (!resposta.equals("S")) {
                        return null;
                    }
                } else {
                    // Tenta extrair a parte numérica para validar se é maior que zero
                    try {
                        String[] partes = peso.split(" ");
                        double valorNumerico = Double.parseDouble(partes[0].replace(",", "."));
                        
                        if (valorNumerico <= 0) {
                            System.out.println("Erro: O valor do peso deve ser maior que zero!");
                            System.out.print("Deseja tentar novamente? (S/N): ");
                            String resposta = scanner.nextLine().trim().toUpperCase();
                            if (!resposta.equals("S")) {
                                return null;
                            }
                        } else {
                            return peso;
                        }
                    } catch (Exception e) {
                        // Se não conseguir extrair um valor numérico, aceita o valor como está
                        // pois pode ser um formato complexo que inclui a unidade
                        return peso;
                    }
                }
            }
        }
    }
    
    /**
     * Lê e valida o código NCM no formato 8542.31.00 (4 dígitos, ponto, 2 dígitos, ponto, 2 dígitos)
     * @param scanner Scanner para leitura da entrada
     * @return Código NCM validado ou null em caso de erro
     */
    private static String lerNCM(Scanner scanner) {
        Pattern padrao = Pattern.compile("^\\d{4}\\.\\d{2}\\.\\d{2}$");
        
        while (true) {
            System.out.print("Código NCM (formato: 8542.31.00): ");
            String ncm = scanner.nextLine().trim();
            
            if (padrao.matcher(ncm).matches()) {
                return ncm;
            } else {
                System.out.println("Erro: O código NCM deve seguir o formato XXXX.XX.XX (4 dígitos, ponto, 2 dígitos, ponto, 2 dígitos)!");
                System.out.println("Exemplo: 8542.31.00");
                System.out.println("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return null;
                }
            }
        }
    }
    
    /**
     * Lê e valida o código CFOP no formato 5.405 (1 dígito, ponto, 3 dígitos)
     * @param scanner Scanner para leitura da entrada
     * @return Código CFOP validado ou null em caso de erro
     */
    private static String lerCFOP(Scanner scanner) {
        Pattern padrao = Pattern.compile("^\\d\\.\\d{3}$");
        
        while (true) {
            System.out.print("Código CFOP (formato: 5.405): ");
            String cfop = scanner.nextLine().trim();
            
            if (padrao.matcher(cfop).matches()) {
                return cfop;
            } else {
                System.out.println("Erro: O código CFOP deve seguir o formato X.XXX (1 dígito, ponto, 3 dígitos)!");
                System.out.println("Exemplo: 5.405");
                System.out.println("Deseja tentar novamente? (S/N): ");
                String resposta = scanner.nextLine().trim().toUpperCase();
                if (!resposta.equals("S")) {
                    return null;
                }
            }
        }
    }
    
    /**
     * Lê um valor numérico positivo do usuário com tratamento de exceções
     * @param scanner Scanner para leitura da entrada
     * @param mensagem Mensagem a ser exibida ao usuário
     * @return Valor numérico positivo lido ou -1 em caso de erro
     */
    private static double lerValorNumericoPositivo(Scanner scanner, String mensagem) {
        System.out.print(mensagem);
        try {
            double valor = Double.parseDouble(scanner.nextLine().trim().replace(",", "."));
            if (valor < 0) {
                System.out.println("Erro: O valor não pode ser negativo!");
                return -1;
            }
            return valor;
        } catch (NumberFormatException e) {
            System.out.println("Erro: Valor numérico inválido!");
            return -1;
        }
    }
    
    /**
     * Coleta informações sobre os impostos aplicáveis ao produto
     * @param scanner Scanner para leitura da entrada
     * @return Mapa com os impostos e suas alíquotas ou null em caso de erro
     */
    private static Map<String, Double> coletarImpostos(Scanner scanner) {
        Map<String, Double> impostos = new HashMap<>();
        
        // IPI
        if (confirmarImposto(scanner, "IPI")) {
            impostos.put("IPI", ALIQUOTA_IPI);
        }
        
        // ICMS (estadual)
        if (confirmarImposto(scanner, "ICMS")) {
            System.out.print("Digite a sigla do estado (UF) para cálculo do ICMS: ");
            String uf = scanner.nextLine().trim().toUpperCase();
            
            if (ALIQUOTAS_ICMS.containsKey(uf)) {
                impostos.put("ICMS", ALIQUOTAS_ICMS.get(uf));
                System.out.println("Alíquota de ICMS para " + uf + " em 2025: " + ALIQUOTAS_ICMS.get(uf) + "%");
            } else {
                System.out.println("Erro: UF inválida ou não encontrada!");
                return null;
            }
        }
        
        // PIS/PASEP
        if (confirmarImposto(scanner, "PIS/PASEP")) {
            impostos.put("PIS", ALIQUOTA_PIS);
        }
        
        // COFINS
        if (confirmarImposto(scanner, "COFINS")) {
            impostos.put("COFINS", ALIQUOTA_COFINS);
        }
        
        // IRPJ
        if (confirmarImposto(scanner, "IRPJ")) {
            impostos.put("IRPJ", ALIQUOTA_IRPJ);
        }
        
        // CSLL
        if (confirmarImposto(scanner, "CSLL")) {
            impostos.put("CSLL", ALIQUOTA_CSLL);
        }
        
        // Imposto de Importação
        if (confirmarImposto(scanner, "Imposto de Importação")) {
            impostos.put("II", ALIQUOTA_IMPORTACAO);
        }
        
        // ITBI
        if (confirmarImposto(scanner, "ITBI")) {
            impostos.put("ITBI", ALIQUOTA_ITBI);
        }
        
        return impostos;
    }
    
    /**
     * Confirma se um imposto é aplicável ao produto
     * @param scanner Scanner para leitura da entrada
     * @param nomeImposto Nome do imposto a ser confirmado
     * @return true se o imposto for aplicável, false caso contrário
     */
    private static boolean confirmarImposto(Scanner scanner, String nomeImposto) {
        System.out.print("O produto está sujeito a " + nomeImposto + "? (S/N): ");
        String resposta = scanner.nextLine().trim().toUpperCase();
        return resposta.equals("S");
    }
    
    /**
     * Calcula o valor total dos impostos
     * @param valorBase Valor base para cálculo dos impostos
     * @param impostos Mapa com os impostos e suas alíquotas
     * @return Valor total dos impostos
     */
    private static double calcularValorImpostos(double valorBase, Map<String, Double> impostos) {
        double valorImpostos = 0.0;
        
        for (Map.Entry<String, Double> imposto : impostos.entrySet()) {
            valorImpostos += valorBase * (imposto.getValue() / 100.0);
        }
        
        return valorImpostos;
    }
    
    /**
     * Implementa a consulta por nome para vendedor, comprador ou produto
     * @param scanner Scanner para leitura da entrada
     */
    private static void consultarPorNome(Scanner scanner) {
        System.out.println("\n=== CONSULTA POR NOME ===");
        System.out.println("O que deseja consultar? (vendedor/comprador/produto)");
        String tipo = scanner.nextLine().trim().toLowerCase();
        
        System.out.print("Digite o nome para busca: ");
        String termoBusca = scanner.nextLine().trim().toLowerCase();
        
        boolean encontrado = false;
        
        switch (tipo) {
            case "vendedor":
                encontrado = buscarVendedor(termoBusca);
                break;
            case "comprador":
                encontrado = buscarComprador(termoBusca);
                break;
            case "produto":
                encontrado = buscarProduto(termoBusca);
                break;
            default:
                System.out.println("Tipo de consulta inválido. Use vendedor, comprador ou produto.");
        }
        
        if (!encontrado) {
            System.out.println("Nenhum registro encontrado para: " + termoBusca);
        }
    }
    
    /**
     * Busca vendedores pelo nome
     * @param termo Termo de busca
     * @return true se encontrou algum registro, false caso contrário
     */
    private static boolean buscarVendedor(String termo) {
        List<RegistroVendedor> resultados = vendedores.stream()
            .filter(v -> v.getNomeVendedor().toLowerCase().contains(termo))
            .collect(Collectors.toList());
        
        if (resultados.isEmpty()) {
            return false;
        }
        
        System.out.println("\n=== VENDEDORES ENCONTRADOS ===");
        resultados.forEach(v -> System.out.println(v.getDetalhesCompletos()));
        return true;
    }
    
    /**
     * Busca compradores pelo nome
     * @param termo Termo de busca
     * @return true se encontrou algum registro, false caso contrário
     */
    private static boolean buscarComprador(String termo) {
        List<RegistroComprador> resultados = compradores.stream()
            .filter(c -> c.getNomeComprador().toLowerCase().contains(termo))
            .collect(Collectors.toList());
        
        if (resultados.isEmpty()) {
            return false;
        }
        
        System.out.println("\n=== COMPRADORES ENCONTRADOS ===");
        resultados.forEach(c -> System.out.println(c.getDetalhesCompletos()));
        return true;
    }
    
    /**
     * Busca produtos pelo nome
     * @param termo Termo de busca
     * @return true se encontrou algum registro, false caso contrário
     */
    private static boolean buscarProduto(String termo) {
        List<RegistroProduto> resultados = produtos.stream()
            .filter(p -> p.getNomeProduto().toLowerCase().contains(termo))
            .collect(Collectors.toList());
        
        if (resultados.isEmpty()) {
            return false;
        }
        
        System.out.println("\n=== PRODUTOS ENCONTRADOS ===");
        resultados.forEach(p -> System.out.println(p.getDetalhesCompletos()));
        return true;
    }
    
    /**
     * Lista todos os registros do sistema (compradores, vendedores e produtos)
     */
    private static void listarTodos() {
        System.out.println("\n=== LISTAGEM COMPLETA ===");
        
        if (compradores.isEmpty() && vendedores.isEmpty() && produtos.isEmpty()) {
            System.out.println("Não há registros no sistema.");
            return;
        }
        
        // Lista todos os compradores
        if (!compradores.isEmpty()) {
            System.out.println("\n--- COMPRADORES ---");
            compradores.forEach(c -> System.out.println(c.getDetalhesCompletos()));
        }
        
        // Lista todos os vendedores
        if (!vendedores.isEmpty()) {
            System.out.println("\n--- VENDEDORES ---");
            vendedores.forEach(v -> System.out.println(v.getDetalhesCompletos()));
        }
        
        // Lista todos os produtos
        if (!produtos.isEmpty()) {
            System.out.println("\n--- PRODUTOS ---");
            produtos.forEach(p -> System.out.println(p.getDetalhesCompletos()));
        }
    }
}

/**
 * Classe RegistroVendedor: Representa um vendedor no sistema de vendas online.
 * Armazena o nome e o CNPJ do vendedor, com métodos para acesso e exibição.
 */
class RegistroVendedor {
    private String nomeVendedor;     // Atributo privado para o nome do vendedor (ex.: "Loja ABC")
    private String cnpj;             // Atributo privado para o CNPJ 
    
    /**
     * Construtor da classe RegistroVendedor.
     * @param nomeVendedor Nome do vendedor
     * @param cnpj CNPJ do vendedor
     */
    public RegistroVendedor(String nomeVendedor, String cnpj) {
        this.nomeVendedor = nomeVendedor;
        this.cnpj = cnpj;
    }
    
    /**
     * Método getter para o atributo nomeVendedor.
     * @return O nome do vendedor (String)
     */
    public String getNomeVendedor() {
        return nomeVendedor;
    }
    
    /**
     * Método getter para o atributo CNPJ.
     * @return O CNPJ do vendedor (String)
     */
    public String getCNPJ() {
        return cnpj;
    }
    
    /**
     * Retorna os detalhes completos do vendedor em formato de texto.
     * @return String com todos os detalhes do vendedor
     */
    public String getDetalhesCompletos() {
        StringBuilder sb = new StringBuilder();
        sb.append("=== DETALHES DO VENDEDOR ===\n");
        sb.append("Nome: ").append(nomeVendedor).append("\n");
        sb.append("CNPJ: ").append(cnpj);
        return sb.toString();
    }
    
    /**
     * Sobrescreve o método toString da classe Object.
     * @return String representando o vendedor
     */
    @Override
    public String toString() {
        return "Vendedor: " + nomeVendedor + " - CNPJ: " + cnpj;
    }
}

/**
 * Classe RegistroComprador: Representa um comprador no sistema de vendas online.
 * Armazena o nome e o CPF do comprador, com método para exibição.
 */
class RegistroComprador {
    private String nomeComprador;    // Atributo privado para o nome do comprador
    private String cpf;              // Atributo privado para o CPF
    
    /**
     * Construtor da classe RegistroComprador.
     * @param nomeComprador Nome do comprador
     * @param cpf CPF do comprador
     */
    public RegistroComprador(String nomeComprador, String cpf) {
        this.nomeComprador = nomeComprador;
        this.cpf = cpf;
    }
    
    /**
     * Método getter para o atributo nomeComprador.
     * @return O nome do comprador (String)
     */
    public String getNomeComprador() {
        return nomeComprador;
    }
    
    /**
     * Método getter para o atributo CPF.
     * @return O CPF do comprador (String)
     */
    public String getCPF() {
        return cpf;
    }
    
    /**
     * Retorna os detalhes completos do comprador em formato de texto.
     * @return String com todos os detalhes do comprador
     */
    public String getDetalhesCompletos() {
        StringBuilder sb = new StringBuilder();
        sb.append("=== DETALHES DO COMPRADOR ===\n");
        sb.append("Nome: ").append(nomeComprador).append("\n");
        sb.append("CPF: ").append(cpf);
        return sb.toString();
    }
    
    /**
     * Sobrescreve o método toString da classe Object.
     * @return String representando o comprador
     */
    @Override
    public String toString() {
        return "Comprador: " + nomeComprador + " - CPF: " + cpf;
    }
}

/**
 * Classe RegistroProduto: Representa um produto no sistema de vendas online.
 * Armazena informações detalhadas do produto, incluindo dados fiscais e impostos.
 */
class RegistroProduto {
    // Atributos básicos
    private String nomeProduto;
    private double preco;
    private RegistroVendedor vendedor;
    
    // Atributos fiscais e detalhados
    private String descricaoCompleta;
    private String codigoNCM;
    private double quantidade;
    private String unidade;
    private String codigoCFOP;
    private double valorSemImpostos;
    private double valorImpostos;
    private double valorTotal;
    private String informacoesComplementares;
    
    // Impostos aplicáveis
    private Map<String, Double> impostos;

    /**
     * Construtor da classe RegistroProduto com todos os atributos.
     * @param nomeProduto Nome do produto
     * @param preco Preço unitário do produto
     * @param vendedor Vendedor associado ao produto
     * @param descricaoCompleta Descrição detalhada do produto
     * @param codigoNCM Código NCM (Nomenclatura Comum do Mercosul)
     * @param quantidade Quantidade do produto
     * @param unidade Peso (kg, g, t, etc)
     * @param codigoCFOP Código CFOP (Código Fiscal de Operações e Prestações)
     * @param valorSemImpostos Valor da operação sem impostos
     * @param valorImpostos Valor dos impostos
     * @param valorTotal Valor total da operação com impostos
     * @param informacoesComplementares Informações adicionais sobre o produto
     * @param impostos Mapa com os impostos aplicáveis e suas alíquotas
     */
    public RegistroProduto(
            String nomeProduto, 
            double preco, 
            RegistroVendedor vendedor,
            String descricaoCompleta,
            String codigoNCM,
            double quantidade,
            String unidade,
            String codigoCFOP,
            double valorSemImpostos,
            double valorImpostos,
            double valorTotal,
            String informacoesComplementares,
            Map<String, Double> impostos) {
        
        this.nomeProduto = nomeProduto;
        this.preco = preco;
        this.vendedor = vendedor;
        this.descricaoCompleta = descricaoCompleta;
        this.codigoNCM = codigoNCM;
        this.quantidade = quantidade;
        this.unidade = unidade;
        this.codigoCFOP = codigoCFOP;
        this.valorSemImpostos = valorSemImpostos;
        this.valorImpostos = valorImpostos;
        this.valorTotal = valorTotal;
        this.informacoesComplementares = informacoesComplementares;
        this.impostos = impostos;
    }

    /**
     * Método getter para o atributo nomeProduto.
     * @return O nome do produto
     */
    public String getNomeProduto() {
        return nomeProduto;
    }
    
    /**
     * Método getter para o atributo preco.
     * @return O preço unitário do produto
     */
    public double getPreco() {
        return preco;
    }
    
    /**
     * Método getter para o atributo vendedor.
     * @return O vendedor associado ao produto
     */
    public RegistroVendedor getVendedor() {
        return vendedor;
    }
    
    /**
     * Método getter para o atributo descricaoCompleta.
     * @return A descrição completa do produto
     */
    public String getDescricaoCompleta() {
        return descricaoCompleta;
    }
    
    /**
     * Método getter para o atributo codigoNCM.
     * @return O código NCM do produto
     */
    public String getCodigoNCM() {
        return codigoNCM;
    }
    
    /**
     * Método getter para o atributo quantidade.
     * @return A quantidade do produto
     */
    public double getQuantidade() {
        return quantidade;
    }
    
    /**
     * Método getter para o atributo unidade.
     * @return O peso do produto
     */
    public String getUnidade() {
        return unidade;
    }
    
    /**
     * Método getter para o atributo codigoCFOP.
     * @return O código CFOP do produto
     */
    public String getCodigoCFOP() {
        return codigoCFOP;
    }
    
    /**
     * Método getter para o atributo valorSemImpostos.
     * @return O valor da operação sem impostos
     */
    public double getValorSemImpostos() {
        return valorSemImpostos;
    }
    
    /**
     * Método getter para o atributo valorImpostos.
     * @return O valor dos impostos
     */
    public double getValorImpostos() {
        return valorImpostos;
    }
    
    /**
     * Método getter para o atributo valorTotal.
     * @return O valor total da operação com impostos
     */
    public double getValorTotal() {
        return valorTotal;
    }
    
    /**
     * Método getter para o atributo informacoesComplementares.
     * @return As informações complementares do produto
     */
    public String getInformacoesComplementares() {
        return informacoesComplementares;
    }
    
    /**
     * Método getter para o atributo impostos.
     * @return Mapa com os impostos aplicáveis e suas alíquotas
     */
    public Map<String, Double> getImpostos() {
        return impostos;
    }
    
    /**
     * Retorna os detalhes completos do produto em formato de texto.
     * @return String com todos os detalhes do produto
     */
    public String getDetalhesCompletos() {
        StringBuilder sb = new StringBuilder();
        sb.append("=== DETALHES DO PRODUTO ===\n");
        sb.append("Nome: ").append(nomeProduto).append("\n");
        sb.append("Descrição: ").append(descricaoCompleta).append("\n");
        sb.append("Preço unitário: R$ ").append(String.format("%.10f", preco)).append("\n");
        sb.append("Quantidade: ").append(quantidade).append("\n").append("Peso: ").append(unidade).append("\n");
        sb.append("Valor sem impostos: R$ ").append(String.format("%.10f", valorSemImpostos)).append("\n");
        sb.append("Código NCM: ").append(codigoNCM).append("\n");
        sb.append("Código CFOP: ").append(codigoCFOP).append("\n");
        sb.append("Vendedor: ").append(vendedor.getNomeVendedor()).append(" (CNPJ: ").append(vendedor.getCNPJ()).append(")\n");
        
        // Detalhes dos impostos
        sb.append("\nImpostos aplicáveis:\n");
        if (impostos.isEmpty()) {
            sb.append("Nenhum imposto aplicável\n");
        } else {
            for (Map.Entry<String, Double> imposto : impostos.entrySet()) {
                double valorImposto = valorSemImpostos * (imposto.getValue() / 100.0);
                sb.append("- ").append(imposto.getKey()).append(": ")
                  .append(String.format("%.10f", imposto.getValue())).append("% (R$ ")
                  .append(String.format("%.10f", valorImposto)).append(")\n");
            }
            sb.append("Total de impostos: R$ ").append(String.format("%.10f", valorImpostos)).append("\n");
        }
        
        sb.append("\nValor total com impostos: R$ ").append(String.format("%.10f", valorTotal)).append("\n");
        sb.append("Informações complementares: ").append(informacoesComplementares);
        return sb.toString();
    }

    /**
     * Sobrescreve o método toString da classe Object.
     * @return String representando o produto
     */
    @Override
    public String toString() {
        return "Produto: " + nomeProduto + 
               " - R$ " + String.format("%.10f", preco) + 
               " - Quantidade: " + quantidade + " Peso: " + unidade +
               " - Total com impostos: R$ " + String.format("%.10f", valorTotal) +
               " - Vendedor: " + vendedor.getNomeVendedor();
    }
}
